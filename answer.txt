2-1. The length of my array is 1, the memory address is 0, and
the capacity of my array is 3. 

2-2.The length of my array is 6, the memory address of my array
is 0, and and the capacity of my array is 12 (initially 0, then 
when resized after the first push, became 3, then after the fourth
push became four*3 because size ratio is 3, did not need to resize
after that).

3. The length is 3, memory address is 0, and the capacity is 12. 
The result of running pop three times is that the length of our array 
has been shortened (and we returned those popped values). However 
the values we previously pushed are still in the memory.

4. The result is NaN, this is because the memory is initialized to an
Float64Array, which is a type of array that only accepts Float data types
(decimals). Previously when we pushed in the integers, those were being cast 
to decimals (5 -> 5.0 for example) and that is why we were able to push those.

